{"version":3,"sources":["assets/Scripts/Tables/CutTable.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oCAAoC;AACpC,yBAA2C;AAC3C,iCAAgC;AAChC,oDAAmD;AACnD,6CAA4C;AAEpC,IAAA,OAAO,GAAK,eAAU,QAAf,CAAgB;AAG/B;IAA8B,4BAAK;IAAnC;QAAA,qEAiCC;QAhCW,qBAAe,GAAW,CAAC,CAAC;QACnB,iBAAW,GAAW,CAAC,CAAC;QAEjC,QAAE,GAAqB,IAAI,CAAC;;IA6BxC,CAAC;IA3BG,wBAAK,GAAL;QACI,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,qBAAS,CAAC,CAAC;IAChE,CAAC;IAED,yBAAM,GAAN,UAAO,SAAiB;;QACpB,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,YAAY,uBAAU,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE;YAC7F,IAAI,CAAC,eAAe,IAAI,SAAS,CAAC;YAClC,IAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC;YACrE,MAAA,IAAI,CAAC,EAAE,0CAAE,eAAe,CAAC,OAAO,GAAG,GAAG,EAAE;YAExC,IAAI,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,WAAW,EAAE;gBAC1C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBACvC,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;aAC5B;SACJ;IACL,CAAC;IAEO,gCAAa,GAArB,UAAsB,UAAsB;;QACxC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC;QACxB,MAAA,IAAI,CAAC,EAAE,0CAAE,eAAe,CAAC,GAAG,EAAE;IAClC,CAAC;IAEQ,+BAAY,GAAZ;;QACL,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,MAAA,IAAI,CAAC,EAAE,0CAAE,gBAAgB,GAAG;QAC5B,OAAO,iBAAM,YAAY,WAAE,CAAC;IAChC,CAAC;IAhCQ,QAAQ;QADpB,OAAO,CAAC,UAAU,CAAC;OACP,QAAQ,CAiCpB;IAAD,eAAC;CAjCD,AAiCC,CAjC6B,aAAK,GAiClC;AAjCY,4BAAQ","file":"","sourceRoot":"/","sourcesContent":["// assets/Scripts/Tables/CutTable.ts\nimport { _decorator, Component } from 'cc';\nimport { Table } from './Table';\nimport { Ingredient } from '../Objects/Ingredient';\nimport { UIManager } from '../UI/UIManager';\n\nconst { ccclass } = _decorator;\n\n@ccclass('CutTable')\nexport class CutTable extends Table {\n    private cuttingProgress: number = 0;\n    private readonly cuttingTime: number = 3;\n\n    private ui: UIManager | null = null;\n\n    start() {\n        this.ui = this.node.scene.getComponentInChildren(UIManager);\n    }\n\n    update(deltaTime: number) {\n        if (this.currentObject && this.currentObject instanceof Ingredient && !this.currentObject.isCut) {\n            this.cuttingProgress += deltaTime;\n            const percent = Math.min(1, this.cuttingProgress / this.cuttingTime);\n            this.ui?.showCutProgress(percent * 100);\n\n            if (this.cuttingProgress >= this.cuttingTime) {\n                this.cutIngredient(this.currentObject);\n                this.cuttingProgress = 0;\n            }\n        }\n    }\n\n    private cutIngredient(ingredient: Ingredient) {\n        ingredient.isCut = true;\n        this.ui?.showCutProgress(100);\n    }\n\n    override removeObject() {\n        this.cuttingProgress = 0;\n        this.ui?.clearCutProgress();\n        return super.removeObject();\n    }\n}\n"]}