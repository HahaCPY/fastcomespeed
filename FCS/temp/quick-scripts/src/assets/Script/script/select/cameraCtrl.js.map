{"version":3,"sources":["assets/Script/script/select/cameraCtrl.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class cameraCtrl extends cc.Component {\n\n    @property(cc.Node)\n    target: cc.Node = null;\n\n    @property(cc.Vec3)\n    offset: cc.Vec3 = new cc.Vec3(0, 4, 5);\n\n    @property(cc.Integer)\n    followSpeed: number = 5;\n\n    start() {\n        if (!this.target) {\n            console.warn(\"There's no target node in cameraCtrl!\");\n            return;\n        }\n\n        // turn the local position of the target node into world position\n        // Vec3.ZERO = target's center\n        const targetWorldPos = this.target.convertToWorldSpaceAR(cc.Vec3.ZERO);\n\n        // set the initial position of the camera\n        // initialCameraWorldPos = targetWorldPos + offset\n        const initialCameraWorldPos = new cc.Vec3();\n        cc.Vec3.add(initialCameraWorldPos, targetWorldPos, this.offset);\n\n        // convert the initial camera world position to local position\n        this.node.position = this.node.parent ? this.node.parent.convertToNodeSpaceAR(initialCameraWorldPos) : initialCameraWorldPos;\n        \n        this.node.lookAt(targetWorldPos, cc.Vec3.UP);\n    }\n\n    update(dt: number) {\n        if (!this.target) return;\n\n        // get the world position of the target node every dt\n        const targetWorldPos = this.target.convertToWorldSpaceAR(cc.Vec3.ZERO);\n\n        // calculate the desired world position of the camera\n        const desiredWorldPosition = new cc.Vec3();\n        cc.Vec3.add(desiredWorldPosition, targetWorldPos, this.offset);\n\n        // get the current world position of the camera\n        const currentCameraWorldPosition = this.node.convertToWorldSpaceAR(cc.Vec3.ZERO);\n\n        // smooth the camera's movement towards the desired position by using lerp()\n        const smoothedWorldPosition = new cc.Vec3();\n        cc.Vec3.lerp(smoothedWorldPosition, currentCameraWorldPosition, desiredWorldPosition, this.followSpeed * dt);\n\n        // convert the smoothed world position to local position and set it to the camera node\n        this.node.position = this.node.parent ? this.node.parent.convertToNodeSpaceAR(smoothedWorldPosition) : smoothedWorldPosition;\n\n        this.node.lookAt(targetWorldPos, cc.Vec3.UP);\n    }\n}\n"]}