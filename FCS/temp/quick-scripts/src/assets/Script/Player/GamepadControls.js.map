{"version":3,"sources":["assets\\Script\\Player\\GamepadControls.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["const { ccclass, property } = cc._decorator;\r\nimport { IInputControls } from \"./IInputControls\";\r\n\r\n@ccclass\r\nexport class GamepadControls extends cc.Component implements IInputControls {\r\n    public x: number = 0;\r\n    public y: number = 0;\r\n    private moveDir: cc.Vec2 = cc.v2(0, 0);\r\n    private isInteractPressed: boolean = false;\r\n    private isChopPressed: boolean = false;\r\n    private isRunHeld: boolean = false;\r\n    private readonly deadZone: number = 0.2;\r\n\r\n    // 儲存前一幀的 D-pad 狀態\r\n    private prevUp: boolean = false;\r\n    private prevDown: boolean = false;\r\n    private prevLeft: boolean = false;\r\n    private prevRight: boolean = false;\r\n\r\n    update() {\r\n        const pads = navigator.getGamepads?.();\r\n        const gp = pads && pads[0];\r\n        if (!gp) return;\r\n\r\n        let x = 0;\r\n        let y = 0;\r\n\r\n        const up = gp.buttons[12]?.pressed ?? false;\r\n        const down = gp.buttons[13]?.pressed ?? false;\r\n        const left = gp.buttons[14]?.pressed ?? false;\r\n        const right = gp.buttons[15]?.pressed ?? false;\r\n\r\n        // ✅ 模擬 D-pad onKeyDown / onKeyUp\r\n        this.simulateKey(\"Up\", up, this.prevUp);\r\n        this.simulateKey(\"Down\", down, this.prevDown);\r\n        this.simulateKey(\"Left\", left, this.prevLeft);\r\n        this.simulateKey(\"Right\", right, this.prevRight);\r\n\r\n        // 更新方向\r\n        if (up) y = 1;\r\n        else if (down) y = -1;\r\n\r\n        if (left) x = -1;\r\n        else if (right) x = 1;\r\n\r\n        // 若無 D-pad 輸入，檢查左搖桿\r\n        if (x === 0 && y === 0) {\r\n            const ax = gp.axes[0] || 0;\r\n            const ay = gp.axes[1] || 0;\r\n\r\n            if (Math.abs(ax) > this.deadZone) x = ax;\r\n            if (Math.abs(ay) > this.deadZone) y = -ay; // Y 軸反轉\r\n        }\r\n\r\n        this.x = x;\r\n        this.y = y;\r\n       this.moveDir = cc.v2(x, y);\r\n\r\n        // 更新前一幀狀態\r\n        this.prevUp = up;\r\n        this.prevDown = down;\r\n        this.prevLeft = left;\r\n        this.prevRight = right;\r\n\r\n        console.log(`🎮 搖桿 or D-pad 控制：x=${x.toFixed(2)}, y=${y.toFixed(2)}`);\r\n    }\r\n\r\n    // 🔁 封裝成一個方法模擬鍵盤事件\r\n    private simulateKey(direction: string, current: boolean, previous: boolean) {\r\n        if (current && !previous) {\r\n            console.log(`⬅️ D-pad ${direction} Pressed (onKeyDown)`);\r\n        }\r\n        if (!current && previous) {\r\n            console.log(`⬅️ D-pad ${direction} Released (onKeyUp)`);\r\n        }\r\n    }\r\n\r\n    getMoveDirection(): cc.Vec2 {\r\n        return this.moveDir.clone();\r\n    }\r\n\r\n    getInteractPressed(): boolean {\r\n        return this.isInteractPressed;\r\n    }\r\n\r\n    getChopPressed(): boolean {\r\n        return this.isChopPressed;\r\n    }\r\n\r\n    getRunHeld(): boolean {\r\n        return this.isRunHeld;\r\n    }\r\n}\r\n"]}